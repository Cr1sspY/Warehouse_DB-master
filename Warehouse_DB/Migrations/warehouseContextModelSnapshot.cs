// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse_DB.Data;

namespace Warehouse_DB.Migrations
{
    [DbContext(typeof(warehouseContext))]
    partial class warehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Warehouse_DB.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Address")
                        .HasColumnType("INT");

                    b.Property<int>("ConsumedProduct1Id")
                        .HasColumnName("Consumed_Product_1_ID")
                        .HasColumnType("INT");

                    b.Property<int>("ConsumedProduct2Id")
                        .HasColumnName("Consumed_Product_2_ID")
                        .HasColumnType("INT");

                    b.Property<int>("ConsumedProduct3Id")
                        .HasColumnName("Consumed_Product_3_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Name")
                        .HasColumnType("INT");

                    b.Property<int>("PhoneNumber")
                        .HasColumnName("Phone_Number")
                        .HasColumnType("INT");

                    b.HasKey("CustomerId");

                    b.HasIndex("ConsumedProduct1Id");

                    b.HasIndex("ConsumedProduct2Id");

                    b.HasIndex("ConsumedProduct3Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Warehouse_DB.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("Employee_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Address")
                        .HasColumnType("INT");

                    b.Property<int>("Age")
                        .HasColumnType("INT");

                    b.Property<int>("FullName")
                        .HasColumnName("Full_Name")
                        .HasColumnType("INT");

                    b.Property<int>("PassportInformation")
                        .HasColumnName("Passport_Information")
                        .HasColumnType("INT");

                    b.Property<int>("PhoneNumber")
                        .HasColumnName("Phone_Number")
                        .HasColumnType("INT");

                    b.Property<int>("PositionId")
                        .HasColumnName("Position_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Sex")
                        .HasColumnType("INT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Warehouse_DB.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnName("Position_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Duties")
                        .HasColumnType("INT");

                    b.Property<int>("Name")
                        .HasColumnType("INT");

                    b.Property<int>("Requests")
                        .HasColumnType("INT");

                    b.Property<int>("Salary")
                        .HasColumnType("INT");

                    b.HasKey("PositionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Warehouse_DB.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("Product_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("INT");

                    b.Property<int>("Name")
                        .HasColumnType("INT");

                    b.Property<int>("Package")
                        .HasColumnType("INT");

                    b.Property<int>("ShelfLife")
                        .HasColumnName("Shelf_Life")
                        .HasColumnType("INT");

                    b.Property<int>("StorageConditions")
                        .HasColumnName("Storage_Conditions")
                        .HasColumnType("INT");

                    b.Property<int>("TypeId")
                        .HasColumnName("Type_ID")
                        .HasColumnType("INT");

                    b.HasKey("ProductId");

                    b.HasIndex("TypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Warehouse_DB.Models.ProductType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnName("Type_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Description")
                        .HasColumnType("INT");

                    b.Property<int>("Feature")
                        .HasColumnType("INT");

                    b.Property<int>("Name")
                        .HasColumnType("INT");

                    b.HasKey("TypeId");

                    b.ToTable("Product_Type");
                });

            modelBuilder.Entity("Warehouse_DB.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnName("Provider_ID")
                        .HasColumnType("INT");

                    b.Property<int>("Address")
                        .HasColumnType("INT");

                    b.Property<int>("Name")
                        .HasColumnType("INT");

                    b.Property<int>("PhoneNumber")
                        .HasColumnName("Phone_Number")
                        .HasColumnType("INT");

                    b.Property<int>("SuppliedProduct1Id")
                        .HasColumnName("Supplied_Product_1_ID")
                        .HasColumnType("INT");

                    b.Property<int>("SuppliedProduct2Id")
                        .HasColumnName("Supplied_Product_2_ID")
                        .HasColumnType("INT");

                    b.Property<int>("SuppliedProduct3Id")
                        .HasColumnName("Supplied_Product_3_ID")
                        .HasColumnType("INT");

                    b.HasKey("ProviderId");

                    b.HasIndex("SuppliedProduct1Id");

                    b.HasIndex("SuppliedProduct2Id");

                    b.HasIndex("SuppliedProduct3Id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Warehouse_DB.Models.Warehouse", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_ID")
                        .HasColumnType("INT");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("Employee_ID")
                        .HasColumnType("INT");

                    b.Property<int>("OrderDate")
                        .HasColumnName("Order_Date")
                        .HasColumnType("INT");

                    b.Property<int>("Price")
                        .HasColumnType("INT");

                    b.Property<int>("ProductId")
                        .HasColumnName("Product_ID")
                        .HasColumnType("INT");

                    b.Property<int>("ProviderId")
                        .HasColumnName("Provider_ID")
                        .HasColumnType("INT");

                    b.Property<int>("ShipmentDate")
                        .HasColumnName("Shipment_Date")
                        .HasColumnType("INT");

                    b.Property<int>("SupplyDate")
                        .HasColumnName("Supply_Date")
                        .HasColumnType("INT");

                    b.Property<int>("TypeOfDelivery")
                        .HasColumnName("Type_of_Delivery")
                        .HasColumnType("INT");

                    b.Property<int>("Volume")
                        .HasColumnType("INT");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Warehouse_DB.Models.Customer", b =>
                {
                    b.HasOne("Warehouse_DB.Models.Product", "ConsumedProduct1")
                        .WithMany("CustomerConsumedProduct1")
                        .HasForeignKey("ConsumedProduct1Id")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Product", "ConsumedProduct2")
                        .WithMany("CustomerConsumedProduct2")
                        .HasForeignKey("ConsumedProduct2Id")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Product", "ConsumedProduct3")
                        .WithMany("CustomerConsumedProduct3")
                        .HasForeignKey("ConsumedProduct3Id")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse_DB.Models.Employee", b =>
                {
                    b.HasOne("Warehouse_DB.Models.Position", "Position")
                        .WithMany("Employee")
                        .HasForeignKey("PositionId")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse_DB.Models.Product", b =>
                {
                    b.HasOne("Warehouse_DB.Models.ProductType", "Type")
                        .WithMany("Product")
                        .HasForeignKey("TypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse_DB.Models.Provider", b =>
                {
                    b.HasOne("Warehouse_DB.Models.Product", "SuppliedProduct1")
                        .WithMany("ProviderSuppliedProduct1")
                        .HasForeignKey("SuppliedProduct1Id")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Product", "SuppliedProduct2")
                        .WithMany("ProviderSuppliedProduct2")
                        .HasForeignKey("SuppliedProduct2Id")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Product", "SuppliedProduct3")
                        .WithMany("ProviderSuppliedProduct3")
                        .HasForeignKey("SuppliedProduct3Id")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse_DB.Models.Warehouse", b =>
                {
                    b.HasOne("Warehouse_DB.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("Warehouse_DB.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
